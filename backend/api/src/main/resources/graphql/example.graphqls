scalar Date

type Query {
    getTimelineFromUserUseCase(input: GetTimelineFromUserInput!): GetTimelineFromUserPayload
    getUserListWithFollowStatus(input: GetUserListWithFollowStatusInput!): GetUserListWithFollowStatusPayload
}

type Mutation {
    createUser(input: CreateUserInput!): CreateUserPayload
    postMessage(input: PostMessageInput!): PostMessagePayload
    followUser(input: FollowUserInput!): FollowUserPayload
    unfollowUser(input: UnfollowUserInput!): UnfollowUserPayload
}

type UserListItem {
    user: User!
    isFollowing: Boolean!
}

type Post {
    id: Int!
    message: String!
    creationDate: Date!
}

type User {
    id: Int!
    username: String!
}

type TimelineItem {
    post: Post!
    user: User!
}

input CreateUserInput {
    username: String!
}

input PostMessageInput {
    userId: Int!
    message: String!
}

input FollowUserInput {
    followingUserId: Int!
    followedUserId: Int!
}

input UnfollowUserInput {
    followingUserId: Int!
    followedUserId: Int!
}

input GetTimelineFromUserInput {
    userId: Int!
}

input GetUserListWithFollowStatusInput {
    userId: Int!
}

type CreateUserPayload {
    user: User
}

type PostMessagePayload {
    post: Post
    user: User
}

type FollowUserPayload {
    following: User
    followed: User
}

type UnfollowUserPayload {
    following: User
    followed: User
}

type GetTimelineFromUserPayload {
    user: User
    timeline: [TimelineItem]
}

type GetUserListWithFollowStatusPayload {
    user: User
    otherUsersWithFollowStatus: [UserListItem]
}